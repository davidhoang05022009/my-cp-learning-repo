{
  // Place your my-cp-learning-repo workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Create new file for CP": {
    "prefix": "cpn",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "using ll = long long;",
      "using db = double;",
      "#define endl \"\\n\"",
      "void unsync() { ios::sync_with_stdio(0); cin.tie(nullptr); }",
      "ll gcd(ll a, ll b) { if (b == 0) return a; return gcd(b, a % b); }",
      "ll lcm(ll a, ll b) { return (a / gcd(a, b)) * b; }",
      "void fileio(string inputFile, string outputFile) { if(fopen(inputFile.c_str(), \"r\")) { freopen(inputFile.c_str(), \"r\", stdin); freopen(outputFile.c_str(), \"w\", stdout); } }",
      "\n",
      "int main() {",
      "\tunsync();",
      "\t$1",
      "\treturn 0;",
      "}"
    ],
    "description": "Create new file with essentials CP codes"
  }
}
